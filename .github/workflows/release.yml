on:
  push:
    tags:
      - 'v*'  # This will match tags that start with 'v', like v1.0.0
name: Release
jobs:
  test:
    name: Build Test
    strategy:
      matrix:
        go-version: [1.23.x]
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build
        run: go build -v -o /dev/null .

  release_binaries:
    name: Release Binaries
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: goreleaser
        if: success()
        uses: docker://goreleaser/goreleaser:latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: release --config .github/goreleaser.yml

  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure Git Credentials
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - run: echo "cache_id=$(date --utc '+%V')" >> $GITHUB_ENV 
      - name: Configure Git token
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
      - uses: actions/cache@v4
        with:
          key: mkdocs-material-${{ env.cache_id }}
          path: .cache
          restore-keys: |
            mkdocs-material-
      - run: pip install -r requirements.txt
      - run: DEBIAN_FRONTEND=noninteractive sudo apt install -y libcairo2
      - name: Extract version
        id: version
        run: |
          # Get full tag name including 'v' prefix
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
      - name: Deploy docs with mike
        run: |
          export GOLANG_LIB_URL=https://pkg.go.dev/github.com/ahmetozer/sandal@${{ steps.version.outputs.VERSION }}/pkg/lib
          mike deploy --push --update-aliases ${{ steps.version.outputs.VERSION }} latest
          mike set-default --push latest