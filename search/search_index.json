{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sandal","text":""},{"location":"#welcome","title":"Welcome","text":"<p>Sandal is a lightweight portable container environment controller, designed and work with Linux systems.</p>"},{"location":"#goal-of-this-project","title":"Goal of This Project","text":"<p>Sandal creates intermediate layer between host operating system and containers without requiring dedicated memory allocation like as virtual machines.  </p> <ul> <li> <p>This project supports provision container from directories, immutable image files (IMG, Squash FS) so you can execute the container directly from the file, and easy to distribute and configure it with portable media.</p> </li> <li> <p>Portable container images gives ability to provision containers from outside the system host storage system such as SD cards, That enables to access and manage from outside (macOS, Windows) the host operating system when the system is offline.  </p> </li> <li> <p>Easy deployment, enables remote deployment without requiring any software or deep experience at field side.</p> </li> <li> <p>Additionally, these features create easy to manage embedded-Linux work environments or development surface without requiring to build own distribution (Yocto, Buildroot) from scratch for each change.</p> </li> </ul>"},{"location":"guide/commands/","title":"Run","text":"<p>This sub command provisiones a new container to the system.</p> Example usage<pre><code>sandal run -lw / -tmp 10 --rm --  bash\n</code></pre>"},{"location":"guide/commands/#flags","title":"Flags","text":"Flag Type Description <code>bool</code> by default it is set to false, in case of presence, it will be true. <code>string</code> only accepts single string value. <code>value</code> similar to string but multiple presences are accepted"},{"location":"guide/commands/#-chdir-string","title":"<code>-chdir string</code>","text":"container changes will saved this directory (default \"/var/lib/sandal/changedir/new-york\")"},{"location":"guide/commands/#-d-bool","title":"<code>-d bool</code>","text":"run container in background"},{"location":"guide/commands/#-devtmpfs-string","title":"<code>-devtmpfs string</code>","text":"mount point of devtmpfs example: -devtmpfs /mnt/devtmpfs more info unix.stackexchange.com"},{"location":"guide/commands/#-dir-string","title":"<code>-dir string</code>","text":"working directory Default it is set to root folder <code>/</code>"},{"location":"guide/commands/#-env-all-bool","title":"<code>-env-all bool</code>","text":"send all enviroment variables to container Environment variables which currently you are seing at <code>env</code> command."},{"location":"guide/commands/#-env-pass-value","title":"<code>-env-pass value</code>","text":"pass only requested enviroment variables to container For example you are set variable with <code>export FOO=BAR</code>, and <code>-env-pass FOO</code> will read variable from existing environment and passes to container. It does not accepts <code>-env-pass FOO=BAR</code> for security purposes"},{"location":"guide/commands/#-help-bool","title":"<code>-help bool</code>","text":"show this help message"},{"location":"guide/commands/#-hosts-string","title":"<code>-hosts string</code>","text":"cp (copy), cp-n (copy if not exist), image(use image) (default \"cp\") Allocation configuration of /etc/hosts file."},{"location":"guide/commands/#-lw-value","title":"<code>-lw value</code>","text":"Lower directory of the root file system   Lower directories are attach folders or images to container to access but changes are saved under <code>-chdir</code>.   This flag can usable multiple times to attach multiple images and directories to container. More <p>Example Commands</p> <pre><code># Single Lower Directory\nsandal run -lw /my/dir/lw1 -- bash\n# Multiple Lower Directories\nsandal run -lw /my/dir/lw1 -lw /my/dir/lw2 -lw /my/dir/lw3 -- bash\n# SquashFS # (1)\nsandal run -lw /my/img/debian.sqfs -lw /my/image/config.sqfs -- bash\n# Mounting .img file # (2)\nsandal run -tmp 1000 -lw /my/img/2024-11-19-raspios-bookworm-arm64-lite.img:part=2 \\\n-lw /my/image/config.sqfs --rm -- bash \n</code></pre> <ol> <li>You can create SquashFS files with <code>sandal convert</code>.</li> <li>Image files consist of multiple partition, you have to specificly define partition information in commandline.   You can find image details with <code>sandal image info file.img</code></li> </ol> <p>Read file operation</p> <pre><code>graph LR\nM1([MyApp]) --Access--&gt; O1[OverlayFs]\nO1 -- Return File --&gt; M1\n\nO1[OverlayFs] --&gt; E4\nE4{Exist at chdir ?} -- Yes | Read from --&gt; C1[(ChangeDir)]\nE4 -- No | TRY --&gt; E3\n\nE3{Exist at lw3 ?} -- Yes | Read from --&gt; LW3[(lower3)] \nE3 -- No | TRY --&gt; E2\n\nE2{Exist at lw2 ?} -- Yes | Read from --&gt; LW2[(lower2)] \nE2 -- No | TRY --&gt; E1\n\nE1{Exist at lw3 ?} -- Yes | Read from --&gt; LW1[(lower1)]\nE1 -- No | File Not Found --&gt; O1</code></pre> <p>Write file operation</p> <pre><code>graph LR\nM1([MyApp]) --Write--&gt; O1[OverlayFs]\n\nO1[OverlayFs] --&gt; C1[(ChangeDir)]\n</code></pre>"},{"location":"guide/commands/#how-lower-directories-works","title":"How Lower Directories Works ?","text":""},{"location":"guide/commands/#-name-string","title":"<code>-name string</code>","text":"name of the container (default \"new-york\")"},{"location":"guide/commands/#-net-value","title":"<code>-net value</code>","text":"container network interface configuration <pre><code># Allocate custom interface only\nsandal run -lw / -net \"ip=172.19.0.3/24=fd34:0135:0127::9/64\" -- bash\n# Allocate default and custom interface with different bridge\nsandal run -lw / -net \"\" -net \"ip=172.19.0.3/24=fd34:0135:0127::9/64;master=br0\" -- bash\n# Custom interface naming\nsandal run -lw / -net \"\" -net \"name=pppoe;master=layer2\" -- bash\n# Custom mtu or ethernet set\nsandal run -lw / -net \"\" -net \"ether=\"aa:ee:81:f4:c0:d3\";mtu=1480\" -- bash\n</code></pre>"},{"location":"guide/commands/#-ns-cgroup-string","title":"<code>-ns-cgroup string</code>","text":"cgroup namespace or host"},{"location":"guide/commands/#-ns-ipc-string","title":"<code>-ns-ipc string</code>","text":"ipc namespace or host"},{"location":"guide/commands/#-ns-mnt-string","title":"<code>-ns-mnt string</code>","text":"mnt namespace or host"},{"location":"guide/commands/#-ns-net-string","title":"<code>-ns-net string</code>","text":"net namespace or host"},{"location":"guide/commands/#-ns-ns-string","title":"<code>-ns-ns string</code>","text":"ns namespace or host"},{"location":"guide/commands/#-ns-pid-string","title":"<code>-ns-pid string</code>","text":"pid namespace or host"},{"location":"guide/commands/#-ns-time-string","title":"<code>-ns-time string</code>","text":"time namespace or host"},{"location":"guide/commands/#-ns-user-string","title":"<code>-ns-user string</code>","text":"user namespace or host"},{"location":"guide/commands/#-ns-uts-string","title":"<code>-ns-uts string</code>","text":"uts namespace or host"},{"location":"guide/commands/#-rci-value","title":"<code>-rci value</code>","text":"run command before init <pre><code>sandal run -rm -lw / -rci=\"ifconfig eth0\" -- echo hello\n</code></pre>"},{"location":"guide/commands/#-rcp-value","title":"<code>-rcp value</code>","text":"run command before pivoting.   <pre><code>sandal run -rm -lw / -rci=\"ifconfig eth0\" -- echo hello\n</code></pre>"},{"location":"guide/commands/#-rdir-string","title":"<code>-rdir string</code>","text":"root directory of operating system for container init process (default \"/\")"},{"location":"guide/commands/#-resolv-string","title":"<code>-resolv string</code>","text":"cp (copy), cp-n (copy if not exist), image (use image), 1.1.1.1;2606:4700:4700::1111 (provide nameservers) (default \"cp\")"},{"location":"guide/commands/#-rm-bool","title":"<code>-rm bool</code>","text":"remove container files on exit"},{"location":"guide/commands/#-ro-bool","title":"<code>-ro bool</code>","text":"read only rootfs"},{"location":"guide/commands/#-startup","title":"<code>-startup</code>","text":"run container at startup by sandal daemon"},{"location":"guide/commands/#-tmp-uint","title":"<code>-tmp uint</code>","text":"allocate changes at memory instead of disk. Unit is in MB, when set to 0 (default) which means it's disabled. Benefical for: <ul> <li>Provisioning ephemeral environments</li> <li>Able to execute sandal under sandal or docker with tmpfs to prevent overlayFs in overlayFs limitations</li> <li>Reduce disk calls for writing</li> <li>Work with not supported file systems such as fat32, exfat</li> </ul>"},{"location":"guide/commands/#-v-value","title":"<code>-v value</code>","text":"volume mount point <pre><code># chroot to given path\nsandal run -rm -v /mnt/disk1:/ -- bash\n#  attach file,attach path to custom path, attach path, and  to the container.\nsandal run -rm -v /etc/nftables.conf \\\n  -v /run/dbus \\\n  -v /etc/homeas/config:/config  -- bash\n</code></pre>"},{"location":"guide/commands/clear/","title":"Clear","text":"<p>Clear removes stale containers which they have <code>-rm</code> flag during execution.</p> <pre><code>sandal clear\n</code></pre> <p>To clear all containers which they are not in running state you can execute clear with <code>-all</code> argument</p> <pre><code>sandal clear -all\n</code></pre> <pre><code>Usage of exec:\n  -all\n        delete all containers which they are not in running state\n  -help\n        show this help message\n</code></pre>"},{"location":"guide/commands/cmd/","title":"Cmd","text":"<p>Print <code>sandal run ...</code> command of particular container or all containers.</p> <pre><code>sandal cmd new-york\n    sandal run -name new-york -tmp 10 -lw /nvme1/sandal/images/debian.sq -- bash\n</code></pre> <pre><code>sandal cmd -all\n    sandal run -name new-york -tmp 10 -lw /nvme1/sandal/images/debian.sq -- bash\n    sandal run -name istanbul -ns-net host -lw / -- nginx\n    sandal run -lw / -- ping localhost\n    ...\n</code></pre>"},{"location":"guide/commands/daemon/","title":"Daemon","text":"<p>You can start your containers with run command but for following requirements suggested to use daemon service instead of standalone.</p> <ul> <li>Automatically starting containers at the boot</li> <li>Rerun container when process is exits</li> <li>Work with read-only disk system and keep current state at memory</li> <li>Reduce read and write calls to system disk for updating or getting state information</li> </ul>"},{"location":"guide/commands/daemon/#registering-the-service","title":"Registering the Service","text":"<p>Installation of daemon supports Systemd and Open RC init systems.</p> <pre><code>sandal daemon -install\n</code></pre> <p>You can start service with your system init and service controller.</p> managing<pre><code>sh title=\"service control\" annote\n# service sandal [start|stop|restart]\nservice sandal start # (1)!\n</code></pre> <ol> <li>Output of service command varies between Systemd and OpenRC but it does not have impact.</li> </ol>"},{"location":"guide/commands/daemon/#behaviors-of-daemon-service","title":"Behaviors of Daemon Service","text":""},{"location":"guide/commands/daemon/#service-start","title":"Service Start","text":"<p>Provisiones containers which they have a <code>-d</code> and <code>--startup</code> arguments placed while creating with <code>sandal run</code> command.</p>"},{"location":"guide/commands/daemon/#service-stop","title":"Service Stop","text":"<p>Daemon has signal proxy to transfer received following signals to containers.</p> <ul> <li>SIGINT (2)</li> <li>SIGQUIT (3)</li> <li>SIGTERM (15)</li> </ul> <p>If container does not gracefully shut down in 30 second when the signal is recived by contianer, daemon itself will send <code>SIGKILL (9)</code> to the container for ending the process.</p>"},{"location":"guide/commands/daemon/#container-death","title":"Container Death","text":"<p>Health check function checks existence of container Process ID (PID), if not, it re-provisions container with same run arguments.</p>"},{"location":"guide/commands/daemon/#file-events-at-sandal-state-directory","title":"File Events at Sandal State Directory","text":"<p>In case of manual actions under Sandal state directly, system reads those actions and reloads files into daemon. Note: File Events only supported physically attached storage systems. Network attached storage (SMB, NFS) does capable to send those events.</p>"},{"location":"guide/commands/exec/","title":"Exec","text":"<p>Execute a command under given container.</p> <pre><code>export MY_VAR=\"test_var\"\nsandal exec -env-pass MY_VAR new-york -- env\n    PATH=/sbin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/sbin:/sbin\n    MY_VAR=test_var\n</code></pre>"},{"location":"guide/commands/inspect/","title":"Inspect","text":"<p>List configuration file of given container.</p> <pre><code>sandal inspect new-york\n</code></pre> <pre><code>{\n        \"Name\": \"new-york\",\n        \"Created\": 1736884685,\n        \"HostPid\": 222194,\n        \"ContPid\": 222200,\n        \"TmpSize\": 10,\n        ....\n}\n</code></pre>"},{"location":"guide/commands/kill/","title":"Kill","text":"<p>Stop or send custom signal to your container</p> <pre><code>sandal kill klipper\n</code></pre>"},{"location":"guide/commands/kill/#flags","title":"Flags","text":""},{"location":"guide/commands/kill/#-signal-int","title":"<code>-signal int</code>","text":"<p>Define custom signal for kill request.</p> <pre><code>sandal kill -signal 3 homeasistant\n</code></pre>"},{"location":"guide/commands/kill/#-timeout-string","title":"<code>-timeout string</code>","text":"<p>Kill commands wait to proccess complate and you can define time out for this command to give up.</p> <pre><code>sandal kill -signal 2 -timeout 10 homeasistant\n</code></pre>"},{"location":"guide/commands/ps/","title":"Ps","text":"<p>List your, containers with status informations.</p> <pre><code>sandal ps\nNAME              LOWER                              COMMAND CREATED              STATUS PID\nnew-york [\"/nvme1/sandal/images/debian.sq\"] bash    2025-01-18T16:56:13Z          exit 0 280573\nistanbul [\"/\"]                              bash    2024-09-21T14:29:51Z          exit 0 549032\n</code></pre>"},{"location":"guide/commands/rerun/","title":"Rerun","text":"<p>Kill previos container and re exec with same arguments</p> <pre><code>sandal rerun new-york\n</code></pre> Note <p>Sandal does not save any informations related to environment variable. If you are executing container with passenv or envall arguments, environment variables information is getting from executed shell environment. From different shell or session, if you forget to set those variables, your container will be miss those environment variables.</p>"},{"location":"guide/commands/rm/","title":"Rm","text":"<p>Delete containers from system.</p> <pre><code>sandal rm new-york\n</code></pre>"},{"location":"guide/commands/stop/","title":"Stop","text":"<p>Stop or send custom signal to your container, system will not try to restart your container.</p> <pre><code>sandal stop klipper\n</code></pre>"},{"location":"guide/commands/stop/#flags","title":"Flags","text":""},{"location":"guide/commands/stop/#-signal-int","title":"<code>-signal int</code>","text":"<p>Define custom signal for kill request.</p> <pre><code>sandal stop -signal 3 homeasistant\n</code></pre>"},{"location":"guide/commands/stop/#-timeout-string","title":"<code>-timeout string</code>","text":"<p>Kill commands wait to proccess complate and you can define time out for this command to give up.</p> <pre><code>sandal stop -signal 2 -timeout 10 homeasistant\n</code></pre>"},{"location":"setup/","title":"Installation","text":"<p>This software is independent to work with variety Linux distribution, it is only requiring some Linux kernel capabilities which is supported by most of the ready-made distribution.</p>"},{"location":"setup/#from-github","title":"From GitHub","text":"<p>System is single binary and for installation, you can directly download from GitHub releases.</p> <p>Set your system architecture. For Raspberry Pi 4 and newer you can set arm64 for others, armv7 and first generation can use armv6.</p> Available Prebuild Binary Architectures <pre><code>ARCH=amd64  # 64 Bit regular system\nARCH=386    # Old x86 machines\nARCH=arm64  # 64 Bit Arm, Raspberry Pi 4, Raspberry PI 5\nARCH=armv7  # 32 Bit Arm, Raspberry Pi 3-4-5\nARCH=armv6  # Raspberry Pi 1 and other old SBCs\n</code></pre> <p>Download prebuild binary.</p> <pre><code>sudo wget https://github.com/ahmetozer/sandal/releases/latest/download/sandal-linux-${ARCH} -O /usr/bin/sandal\n</code></pre> <p>Set executable permission</p> <pre><code>sudo chmod +x /usr/bin/sandal\n</code></pre> <p>Test downloaded version.</p> <pre><code>sandal help\n</code></pre>"},{"location":"setup/#from-source","title":"From Source","text":"<p>If Golang is already installed, you can get and build at locally.</p> <pre><code>go install github.com/ahmetozer/sandal@latest\nsandal help\n</code></pre>"},{"location":"setup/#starting-at-boot","title":"Starting at boot","text":"<p>System has own daemon to run your containers at startup. To achieve this, you need to register sandal daemon service to your init component.</p> <p>Registration information are available at Daemon</p>"},{"location":"setup/configuration/","title":"Configuration","text":"<p>Each sub command will be configured by, flags and you can find details under /guide/commands/* pages. Project wide configurations are use environment variables for setting.</p>"},{"location":"setup/configuration/#environment-variables","title":"Environment Variables","text":"<p>You can list default, current and defined environement variable configuration with <code>sandal help</code> command.</p> <pre><code>sandal help\nSystem variable information:\n  Variable Name             Set by user                         Used as                             Default\n  SANDAL_LIB_DIR            /tmp/sandal/lib                     /tmp/sandal/lib                     /var/lib/sandal\n  SANDAL_RUN_DIR            /tmp/sandal/run                     /tmp/sandal/run                     /var/run/sandal\n  SANDAL_IMAGE_DIR                                              /tmp/sandal/lib/image               /var/lib/sandal/image\n  SANDAL_STATE_DIR                                              /tmp/sandal/lib/state               /var/lib/sandal/state\n  SANDAL_CHANGE_DIR                                             /tmp/sandal/lib/changedir           /var/lib/sandal/changedir\n  SANDAL_ROOTFSDIR                                              /tmp/sandal/run/rootfs              /var/run/sandal/rootfs\n  SANDAL_IMMUTABLEIMAGEDIR                                      /tmp/sandal/run/immutable           /var/run/sandal/immutable\n  SANDAL_HOST_NET           172.19.0.1/24;fd34:0135:0127::1/64  172.19.0.1/24;fd34:0135:0127::1/64  172.16.0.1/24;fd34:0135:0123::1/64\n  SANDAL_SOCKET                                                 /tmp/sandal/run/sandal.sock         /var/run/sandal/sandal.sock\n  SANDAL_LOG_LEVEL          debug                               debug                               info\n</code></pre>"},{"location":"setup/configuration/#sandal_lib_dir","title":"SANDAL_LIB_DIR","text":"<p>This variable provides path for working directory for project which keeps the files.</p>"},{"location":"setup/configuration/#sandal_run_dir","title":"SANDAL_RUN_DIR","text":"<p>Directory allocation for current runtime such as mountings. After system reboot, those directories can be deleted by your operating system and sandal will be re-allocate those paths.</p>"},{"location":"setup/configuration/#sandal_image_dir","title":"SANDAL_IMAGE_DIR","text":"<p>Default path for images such as SquashFS or Disk images.</p>"},{"location":"setup/configuration/#sandal_state_dir","title":"SANDAL_STATE_DIR","text":"<p>Your container execution configurations and states will save under given directory.</p>"},{"location":"setup/configuration/#sandal_change_dir","title":"SANDAL_CHANGE_DIR","text":"<p>File and folder changes under container will save under this directory. This has no effect unless you have been set -chdir argument while starting up the container.</p>"},{"location":"setup/configuration/#sandal_rootfsdir","title":"SANDAL_ROOTFSDIR","text":"<p>Root file system which is seen by container environment. It is combunation if lowerlayers, mounted valumes and changes which is made in container.</p>"},{"location":"setup/configuration/#sandal_immutableimagedir","title":"SANDAL_IMMUTABLEIMAGEDIR","text":"<p>Immutable images are require to be mounted to operating system for using at containers.</p>"},{"location":"setup/configuration/#sandal_host_net","title":"SANDAL_HOST_NET","text":"<p>Default host network configuration.</p>"},{"location":"setup/configuration/#sandal_socket","title":"SANDAL_SOCKET","text":"<p>Socket location of the sandal state service.</p>"},{"location":"setup/configuration/#sandal_log_level","title":"SANDAL_LOG_LEVEL","text":"<p>Sandal software supports leveled logging and by default runs as <code>info</code> mode. Supported levels are:</p> <ul> <li>debug</li> <li>info</li> <li>warn</li> <li>error</li> </ul>"}]}